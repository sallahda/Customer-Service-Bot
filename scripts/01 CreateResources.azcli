# https://docs.microsoft.com/en-us/azure/developer/python/walkthrough-tutorial-authentication-01

az login

#AZURE_SUBSCRIPTION_NAME='Azure for Students'
AZURE_SUBSCRIPTION_NAME='Self-HBO_ICT'
az account set --subscription $AZURE_SUBSCRIPTION_NAME

az account show --query id --output tsv
AZURE_SUBSCRIPTION_ID=$(az account show --query id --output tsv)

##########################################################
## SET GLOBAL VARIABLES

PREFIX=1199 #$RANDOM

AZURE_LOCATION=westeurope
SCENARIO_RG=MyRg-$PREFIX

MAIN_APP_NAME=$PREFIX-main-app
THIRD_PARTY_API_APP_NAME=$PREFIX-third-party-api 
KEY_VAULT_NAME=key-vault-$PREFIX

MAIN_APP_PLAN_NAME=$MAIN_APP_NAME-plan
MAIN_APP_STORAGE_NAME=${MAIN_APP_NAME//-/}
THIRD_PARTY_API_STORAGE_NAME=${THIRD_PARTY_API_APP_NAME//-/}

THIRD_PARTY_API_SECRET_NAME=third-party-api-key
THIRD_PARTY_API_SECRET_VALUE=d0c5atM1cr0s0ft
STORAGE_QUEUE_NAME=code-requests

echo $MAIN_APP_NAME
echo $THIRD_PARTY_API_APP_NAME
echo $KEY_VAULT_NAME

echo $MAIN_APP_PLAN_NAME
echo $MAIN_APP_STORAGE_NAME
echo $THIRD_PARTY_API_STORAGE_NAME

echo $THIRD_PARTY_API_SECRET_NAME
echo $THIRD_PARTY_API_SECRET_VALUE
echo $STORAGE_QUEUE_NAME

##########################################################

# Step 1: Provision a containing resource group 
az group create \
    --location $AZURE_LOCATION \
    --resource-group $SCENARIO_RG

##########################################################

# Deploy the third-party API to Azure Functions
# Step 2:   Create needed resources
#            Create storage account
az storage account create \
    --name $THIRD_PARTY_API_STORAGE_NAME \
    --location $AZURE_LOCATION \
    --resource-group $SCENARIO_RG \
    --sku Standard_LRS

#           Create empty Azure Function
az functionapp create \
    --resource-group $SCENARIO_RG \
    --os-type Linux \
    --consumption-plan-location $AZURE_LOCATION \
    --runtime python \
    --runtime-version 3.9 \
    --functions-version 3 \
    --name $THIRD_PARTY_API_APP_NAME \
    --storage-account $THIRD_PARTY_API_STORAGE_NAME

#    Publish Azure Function
cd third_party_api

# Step 3
# If func does not work
# https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=v4%2Cwindows%2Ccsharp%2Cportal%2Cbash#v2

func azure functionapp publish $THIRD_PARTY_API_APP_NAME

# Step 4
#       Test Azure function
#       Deployment works with 
#       Where the code = hardcopied from the Azure Portal

#curl https://20284-third-party-api.azurewebsites.net/api/randomnumber?code=nOS9PElDQXTDBjEtHpBInglsvMj3qTiw/g1rWTAatEs/bu1uW4NS6w==
#curl https://31591-third-party-api.azurewebsites.net/api/randomnumber?code=0JI12aWNQA0qkWXa37ZWaR/SbK81gj3jVNM0hjmCqfVH7rivV6WBJQ==
curl https://1199-third-party-api.azurewebsites.net/api/randomnumber?code=6qgSboy6mY-DMW5pdaUmrkshL3_85nttg9uR036GKRHcAzFuQlqy8A==

# MACINTOSH
# curl "https://20284-third-party-api.azurewebsites.net/api/randomnumber?code=nOS9PElDQXTDBjEtHpBInglsvMj3qTiw/g1rWTAatEs/bu1uW4NS6w=="

# Or get the masterkey through coding

key=$(az rest --method post --uri "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$SCENARIO_RG/providers/Microsoft.Web/sites/$THIRD_PARTY_API_APP_NAME/host/default/listKeys?api-version=2018-11-01" --query masterKey --output tsv)

AZURE_FUNCTIONS_APP_KEY=$key
echo $AZURE_FUNCTIONS_APP_KEY


#       Curl now works with ***?code=AZURE_FUNCTIONS_APP_KEY
curl https://1199-third-party-api.azurewebsites.net/api/randomnumber?code=$AZURE_FUNCTIONS_APP_KEY

#       Step 5:
#       Now use the Functions key management to set the function-level access key.
#       When deployed, the function has a default key, but we want to demonstrate
#       setting a specific API key. Earlier we set
#       THIRD_PARTY_API_SECRET_NAME=third-party-api-key
#       THIRD_PARTY_API_SECRET_VALUE=d0c5atM1cr0s0ft

#echo "Setting function key $THIRD_PARTY_API_SECRET_NAME to value $THIRD_PARTY_API_SECRET_VALUE"

az rest  --method put  \
            --uri "https://$THIRD_PARTY_API_APP_NAME.azurewebsites.net/admin/functions/RandomNumber/keys/$THIRD_PARTY_API_SECRET_NAME?code=$AZURE_FUNCTIONS_APP_KEY" \
            --body "{\"name\": \"$THIRD_PARTY_API_SECRET_NAME\", \"value\": \"$THIRD_PARTY_API_SECRET_VALUE\"}"


az functionapp function keys list --function-name randomnumber \
                                  --name $THIRD_PARTY_API_APP_NAME \
                                  --resource-group $SCENARIO_RG
#       You can use the following command to retrieve the key from AzureFunctions
#az rest --method get --uri "https://$THIRD_PARTY_API_APP_NAME.azurewebsites.net/admin/functions/RandomNumber/keys/$THIRD_PARTY_API_SECRET_NAME?code=$AZURE_FUNCTIONS_APP_KEY" --query value --output tsv

#       Curl now works with https://20284-third-party-api.azurewebsites.net/api/randomnumber?code=d0c5atM1cr0s0ft

# curl  https://6271-third-party-api.azurewebsites.net/api/randomnumber?code=d0c5atM1cr0s0ft
curl  https://1199-third-party-api.azurewebsites.net/api/randomnumber?code=d0c5atM1cr0s0ft
curl  https://1199-third-party-api.azurewebsites.net/api/randomnumber?code=$THIRD_PARTY_API_SECRET_VALUE


##########################################################

#   Create Keyvault and storage queue

# Step 6: Provision a storage account for the main app 
# echo "Provisioning storage account $MAIN_APP_STORAGE_NAME for main app"
az storage account create \
    --name $MAIN_APP_STORAGE_NAME \
    --location $AZURE_LOCATION \
    --resource-group $SCENARIO_RG \
    --sku Standard_LRS

#   Step 7: Create a queue within the storage account
#   The queue is created using a connection string
#   Retreive the connection string for the storage account and save it 
#   to an environment variable MAIN_APP_STORAGE_CONN_STRING.

#echo "Retrieving storage account connection string"
az storage account show-connection-string --resource-group $SCENARIO_RG --name $MAIN_APP_STORAGE_NAME --query connectionString --output tsv

conn=$(az storage account show-connection-string --resource-group $SCENARIO_RG --name $MAIN_APP_STORAGE_NAME --query connectionString --output tsv)
MAIN_APP_STORAGE_CONN_STRING=$conn

echo $MAIN_APP_STORAGE_CONN_STRING

# Get the queue service URL for the storage account
az storage account show \
    --name  $MAIN_APP_STORAGE_NAME \
    --resource-group $SCENARIO_RG \
    --query "primaryEndpoints.queue"

#       Create a queue within the storage account

#echo "Creating the storage queue $STORAGE_QUEUE_NAME in the main app storage account"

az storage queue create \
    --name $STORAGE_QUEUE_NAME \
    --account-name $MAIN_APP_STORAGE_NAME \
    --connection-string $MAIN_APP_STORAGE_CONN_STRING


# Step 8: Create a Keyfault and set the secret

# Hard delete if exists
# az keyvault purge \
#     --name $KEY_VAULT_NAME \
#     --location $AZURE_LOCATION \
#     --no-wait

#echo "Provisioning Azure Key Vault $KEY_VAULT_NAME"

az keyvault create \
    --name $KEY_VAULT_NAME \
    --resource-group $SCENARIO_RG \
    --location $AZURE_LOCATION

# Store the third-party API access key as a Key Vault "secret".
#echo "Setting secret $THIRD_PARTY_API_SECRET_NAME to value $THIRD_PARTY_API_SECRET_VALUE"

# Step 9:
az keyvault secret set \
    --vault-name $KEY_VAULT_NAME \
    --name $THIRD_PARTY_API_SECRET_NAME \
    --value $THIRD_PARTY_API_SECRET_VALUE

##########################################################
# Step 10: 
# Test local app 
# Set file .env ok
# Rename if needed appLocal.py  to app.py
# Rename if needed app.py to appRemote.py
# cd main_app
# flask run
# webbrowser or curl http://127.0.0.1:5000/api/v1/getcode

##########################################################
##########################################################

#   Test on Azure
# Rename if needed app.py  to appLocal.py
# Rename if needed appRemote.py to app.py
# Main differences between  appLocal and appRemote
    ## credential = DefaultAzureCredential()
    ## credential = AzureCliCredential()

    # Toggle between local queue access and Azure queue access

##########################################################

#   Step 11 : publish main_app

cd main_app

# echo "Provisioning Azure App Service and deploying the main app"
az webapp up \
    --name $MAIN_APP_NAME \
    --plan $MAIN_APP_PLAN_NAME \
    --sku B1 \
    --resource-group $SCENARIO_RG \
    --location $AZURE_LOCATION

# Step 12: Enable managed identity on the web app 
# echo "set managed identity on app"
az webapp identity assign --name $MAIN_APP_NAME --resource-group $SCENARIO_RG 

az webapp identity show --name $MAIN_APP_NAME --resource-group $SCENARIO_RG 

# step 13:
# Set the wep app the  Storage Queue Data Contributor role, so it can
# write to queues in the storage account. 

id=$(az webapp identity show --name $MAIN_APP_NAME --resource-group $SCENARIO_RG --query principalId --output tsv)
MAIN_APP_OBJECT_ID=$id


MSYS_NO_PATHCONV=1 \
az role assignment create \
    --assignee $MAIN_APP_OBJECT_ID \
    --role "Storage Queue Data Contributor" \
    --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$SCENARIO_RG/providers/Microsoft.Storage/storageAccounts/$MAIN_APP_STORAGE_NAME/queueServices/default/queues/$STORAGE_QUEUE_NAME"

#  Step 14:  Set a read role for the web app to the KeyFault

az keyvault set-policy \
    --name $KEY_VAULT_NAME \
    --object-id $MAIN_APP_OBJECT_ID \
    --resource-group $SCENARIO_RG \
    --secret-permissions get


# Step 15: setting config variables
# code from setting up earlier, repeated only for testing purposes
conn=$(az storage account show-connection-string --resource-group $SCENARIO_RG --name $MAIN_APP_STORAGE_NAME --query connectionString --output tsv)
MAIN_APP_STORAGE_CONN_STRING=$conn

az webapp config appsettings set \
    --name $MAIN_APP_NAME \
    --resource-group $SCENARIO_RG \
    --settings KEY_VAULT_URL="https://$KEY_VAULT_NAME.vault.azure.net/" \
                THIRD_PARTY_API_ENDPOINT="https://$THIRD_PARTY_API_APP_NAME.azurewebsites.net/api/RandomNumber" \
                THIRD_PARTY_API_SECRET_NAME="$THIRD_PARTY_API_SECRET_NAME" \
                STORAGE_QUEUE_NAME="$STORAGE_QUEUE_NAME" \
                STORAGE_QUEUE_URL="https://$MAIN_APP_STORAGE_NAME.queue.core.windows.net/$STORAGE_QUEUE_NAME" \
                MAIN_APP_STORAGE_CONN_STRING=$MAIN_APP_STORAGE_CONN_STRING



# Step 16: test from CLI
az rest --method get --uri "https://$MAIN_APP_NAME.azurewebsites.net/api/v1/getcode"



#echo "Retrieving the most recent message from the queue"

az storage message get \
    --connection-string $MAIN_APP_STORAGE_CONN_STRING \
    --queue-name $STORAGE_QUEUE_NAME

az storage message clear \
    --connection-string $MAIN_APP_STORAGE_CONN_STRING \
    --queue-name $STORAGE_QUEUE_NAME


